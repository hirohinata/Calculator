//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/azuri_hirohinata/Desktop/ANTLR/Calculator/Expression/Expression.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IExpressionVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInput([NotNull] ExpressionParser.InputContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] ExpressionParser.ExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddExpr([NotNull] ExpressionParser.AddExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubExpr([NotNull] ExpressionParser.SubExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>noneAdditiveExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNoneAdditiveExpr([NotNull] ExpressionParser.NoneAdditiveExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>noneMultipricativeExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.multipricativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNoneMultipricativeExpr([NotNull] ExpressionParser.NoneMultipricativeExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multiExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.multipricativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiExpr([NotNull] ExpressionParser.MultiExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenMultiExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.multipricativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenMultiExpr([NotNull] ExpressionParser.ParenMultiExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>divExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.multipricativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivExpr([NotNull] ExpressionParser.DivExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>nonePowerExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.powerExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonePowerExpr([NotNull] ExpressionParser.NonePowerExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>powExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.powerExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowExpr([NotNull] ExpressionParser.PowExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>noneUnaryExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNoneUnaryExpr([NotNull] ExpressionParser.NoneUnaryExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>plusExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusExpr([NotNull] ExpressionParser.PlusExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>minusExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinusExpr([NotNull] ExpressionParser.MinusExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExpr([NotNull] ExpressionParser.PrimaryExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.parenExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpr([NotNull] ExpressionParser.ParenExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.funccallExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunccallExpr([NotNull] ExpressionParser.FunccallExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>uintLiteral</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUintLiteral([NotNull] ExpressionParser.UintLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>realLiteral</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRealLiteral([NotNull] ExpressionParser.RealLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] ExpressionParser.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifier</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] ExpressionParser.IdentifierContext context);
}
