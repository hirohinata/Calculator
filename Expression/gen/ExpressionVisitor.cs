//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/azuri_hirohinata/Desktop/ANTLR/Calculator/Expression/Expression.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IExpressionVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInput([NotNull] ExpressionParser.InputContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_additive</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_additive([NotNull] ExpressionParser.Expr_additiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_power</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_power([NotNull] ExpressionParser.Expr_powerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_funccall</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_funccall([NotNull] ExpressionParser.Expr_funccallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_multipricative</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_multipricative([NotNull] ExpressionParser.Expr_multipricativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_unary</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_unary([NotNull] ExpressionParser.Expr_unaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_none</c>
	/// labeled alternative in <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_none([NotNull] ExpressionParser.Expr_noneContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.paren_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParen_expr([NotNull] ExpressionParser.Paren_exprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>num_uint</c>
	/// labeled alternative in <see cref="ExpressionParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNum_uint([NotNull] ExpressionParser.Num_uintContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>num_real</c>
	/// labeled alternative in <see cref="ExpressionParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNum_real([NotNull] ExpressionParser.Num_realContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>num_string</c>
	/// labeled alternative in <see cref="ExpressionParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNum_string([NotNull] ExpressionParser.Num_stringContext context);
}
