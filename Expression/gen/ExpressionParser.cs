//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/azuri_hirohinata/Desktop/ANTLR/Calculator/Expression/Expression.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, ASTERISK=3, SLASH=4, HAT=5, OPEN_PAREN=6, CLOSE_PAREN=7, 
		COMMA=8, DOT=9, UINT=10, REAL=11, STRING=12, IDENTIFIER=13, WS=14;
	public const int
		RULE_input = 0, RULE_expr = 1, RULE_additiveExpr = 2, RULE_multipricativeExpr = 3, 
		RULE_powerExpr = 4, RULE_unaryExpr = 5, RULE_primaryExpr = 6, RULE_parenExpr = 7, 
		RULE_funccallExpr = 8, RULE_literal = 9;
	public static readonly string[] ruleNames = {
		"input", "expr", "additiveExpr", "multipricativeExpr", "powerExpr", "unaryExpr", 
		"primaryExpr", "parenExpr", "funccallExpr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "ASTERISK", "SLASH", "HAT", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "DOT", "UINT", "REAL", "STRING", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ExpressionParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expr();
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; additiveExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
	 
		public AdditiveExprContext() { }
		public virtual void CopyFrom(AdditiveExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddExprContext : AdditiveExprContext {
		public AdditiveExprContext lhs;
		public MultipricativeExprContext rhs;
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public AddExprContext(AdditiveExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : AdditiveExprContext {
		public AdditiveExprContext lhs;
		public MultipricativeExprContext rhs;
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public SubExprContext(AdditiveExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneAdditiveExprContext : AdditiveExprContext {
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public NoneAdditiveExprContext(AdditiveExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		return additiveExpr(0);
	}

	private AdditiveExprContext additiveExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, _parentState);
		AdditiveExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_additiveExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NoneAdditiveExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 26; multipricativeExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 34;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new AddExprContext(new AdditiveExprContext(_parentctx, _parentState));
						((AddExprContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpr);
						State = 28;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 29; Match(PLUS);
						State = 30; ((AddExprContext)_localctx).rhs = multipricativeExpr(0);
						}
						break;
					case 2:
						{
						_localctx = new SubExprContext(new AdditiveExprContext(_parentctx, _parentState));
						((SubExprContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpr);
						State = 31;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 32; Match(MINUS);
						State = 33; ((SubExprContext)_localctx).rhs = multipricativeExpr(0);
						}
						break;
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultipricativeExprContext : ParserRuleContext {
		public MultipricativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipricativeExpr; } }
	 
		public MultipricativeExprContext() { }
		public virtual void CopyFrom(MultipricativeExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoneMultipricativeExprContext : MultipricativeExprContext {
		public PowerExprContext powerExpr() {
			return GetRuleContext<PowerExprContext>(0);
		}
		public NoneMultipricativeExprContext(MultipricativeExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneMultipricativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiExprContext : MultipricativeExprContext {
		public MultipricativeExprContext lhs;
		public PowerExprContext rhs;
		public ITerminalNode ASTERISK() { return GetToken(ExpressionParser.ASTERISK, 0); }
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public PowerExprContext powerExpr() {
			return GetRuleContext<PowerExprContext>(0);
		}
		public MultiExprContext(MultipricativeExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenMultiExprContext : MultipricativeExprContext {
		public MultipricativeExprContext lhs;
		public ParenExprContext rhs;
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public ParenExprContext parenExpr() {
			return GetRuleContext<ParenExprContext>(0);
		}
		public ParenMultiExprContext(MultipricativeExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenMultiExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExprContext : MultipricativeExprContext {
		public MultipricativeExprContext lhs;
		public PowerExprContext rhs;
		public ITerminalNode SLASH() { return GetToken(ExpressionParser.SLASH, 0); }
		public MultipricativeExprContext multipricativeExpr() {
			return GetRuleContext<MultipricativeExprContext>(0);
		}
		public PowerExprContext powerExpr() {
			return GetRuleContext<PowerExprContext>(0);
		}
		public DivExprContext(MultipricativeExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipricativeExprContext multipricativeExpr() {
		return multipricativeExpr(0);
	}

	private MultipricativeExprContext multipricativeExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultipricativeExprContext _localctx = new MultipricativeExprContext(Context, _parentState);
		MultipricativeExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_multipricativeExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NoneMultipricativeExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 40; powerExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 50;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultiExprContext(new MultipricativeExprContext(_parentctx, _parentState));
						((MultiExprContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multipricativeExpr);
						State = 42;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 43; Match(ASTERISK);
						State = 44; ((MultiExprContext)_localctx).rhs = powerExpr();
						}
						break;
					case 2:
						{
						_localctx = new DivExprContext(new MultipricativeExprContext(_parentctx, _parentState));
						((DivExprContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multipricativeExpr);
						State = 45;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 46; Match(SLASH);
						State = 47; ((DivExprContext)_localctx).rhs = powerExpr();
						}
						break;
					case 3:
						{
						_localctx = new ParenMultiExprContext(new MultipricativeExprContext(_parentctx, _parentState));
						((ParenMultiExprContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multipricativeExpr);
						State = 48;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 49; ((ParenMultiExprContext)_localctx).rhs = parenExpr();
						}
						break;
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowerExprContext : ParserRuleContext {
		public PowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpr; } }
	 
		public PowerExprContext() { }
		public virtual void CopyFrom(PowerExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PowExprContext : PowerExprContext {
		public UnaryExprContext lhs;
		public PowerExprContext rhs;
		public ITerminalNode HAT() { return GetToken(ExpressionParser.HAT, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public PowerExprContext powerExpr() {
			return GetRuleContext<PowerExprContext>(0);
		}
		public PowExprContext(PowerExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonePowerExprContext : PowerExprContext {
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public NonePowerExprContext(PowerExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonePowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerExprContext powerExpr() {
		PowerExprContext _localctx = new PowerExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_powerExpr);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new NonePowerExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; unaryExpr();
				}
				break;
			case 2:
				_localctx = new PowExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; ((PowExprContext)_localctx).lhs = unaryExpr();
				State = 57; Match(HAT);
				State = 58; ((PowExprContext)_localctx).rhs = powerExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
	 
		public UnaryExprContext() { }
		public virtual void CopyFrom(UnaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoneUnaryExprContext : UnaryExprContext {
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public NoneUnaryExprContext(UnaryExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusExprContext : UnaryExprContext {
		public UnaryExprContext rhs;
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public MinusExprContext(UnaryExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExprContext : UnaryExprContext {
		public UnaryExprContext rhs;
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public PlusExprContext(UnaryExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryExpr);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case UINT:
			case REAL:
			case STRING:
			case IDENTIFIER:
				_localctx = new NoneUnaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; primaryExpr();
				}
				break;
			case PLUS:
				_localctx = new PlusExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(PLUS);
				State = 64; ((PlusExprContext)_localctx).rhs = unaryExpr();
				}
				break;
			case MINUS:
				_localctx = new MinusExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; Match(MINUS);
				State = 66; ((MinusExprContext)_localctx).rhs = unaryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public ParenExprContext parenExpr() {
			return GetRuleContext<ParenExprContext>(0);
		}
		public FunccallExprContext funccallExpr() {
			return GetRuleContext<FunccallExprContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_primaryExpr);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; parenExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; funccallExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenExprContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(ExpressionParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(ExpressionParser.CLOSE_PAREN, 0); }
		public ParenExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenExprContext parenExpr() {
		ParenExprContext _localctx = new ParenExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_parenExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(OPEN_PAREN);
			State = 75; expr();
			State = 76; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallExprContext : ParserRuleContext {
		public IToken funcname;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		public ITerminalNode OPEN_PAREN() { return GetToken(ExpressionParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(ExpressionParser.CLOSE_PAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public FunccallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccallExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallExprContext funccallExpr() {
		FunccallExprContext _localctx = new FunccallExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_funccallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; _localctx.funcname = Match(IDENTIFIER);
			State = 79; Match(OPEN_PAREN);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << OPEN_PAREN) | (1L << UINT) | (1L << REAL) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 80; _localctx._expr = expr();
				_localctx._args.Add(_localctx._expr);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 81; Match(COMMA);
					State = 82; _localctx._expr = expr();
					_localctx._args.Add(_localctx._expr);
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 90; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierContext : LiteralContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionParser.IDENTIFIER, 0); }
		public IdentifierContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(ExpressionParser.STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		public ITerminalNode REAL() { return GetToken(ExpressionParser.REAL, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintLiteralContext : LiteralContext {
		public ITerminalNode UINT() { return GetToken(ExpressionParser.UINT, 0); }
		public UintLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UINT:
				_localctx = new UintLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(UINT);
				}
				break;
			case REAL:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; Match(REAL);
				}
				break;
			case STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; Match(STRING);
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 95; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return additiveExpr_sempred((AdditiveExprContext)_localctx, predIndex);
		case 3: return multipricativeExpr_sempred((MultipricativeExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool additiveExpr_sempred(AdditiveExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multipricativeExpr_sempred(MultipricativeExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', '\x65', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '%', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '(', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x35', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x38', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '?', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x46', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'K', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'V', '\n', '\n', '\f', '\n', 
		'\xE', '\n', 'Y', '\v', '\n', '\x5', '\n', '[', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x63', '\n', '\v', '\x3', '\v', '\x2', '\x4', '\x6', '\b', '\f', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\x2', '\x2', 'i', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\b', ')', '\x3', '\x2', '\x2', '\x2', '\n', '>', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x45', '\x3', '\x2', '\x2', '\x2', '\xE', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'L', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x14', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x18', '\a', 
		'\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\b', '\x4', '\x1', '\x2', '\x1C', '\x1D', '\x5', 
		'\b', '\x5', '\x2', '\x1D', '&', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\f', '\x4', '\x2', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', '\x2', ' ', 
		'%', '\x5', '\b', '\x5', '\x2', '!', '\"', '\f', '\x3', '\x2', '\x2', 
		'\"', '#', '\a', '\x4', '\x2', '\x2', '#', '%', '\x5', '\b', '\x5', '\x2', 
		'$', '\x1E', '\x3', '\x2', '\x2', '\x2', '$', '!', '\x3', '\x2', '\x2', 
		'\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '\a', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', ')', '*', '\b', '\x5', 
		'\x1', '\x2', '*', '+', '\x5', '\n', '\x6', '\x2', '+', '\x36', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\f', '\x5', '\x2', '\x2', '-', '.', '\a', 
		'\x5', '\x2', '\x2', '.', '\x35', '\x5', '\n', '\x6', '\x2', '/', '\x30', 
		'\f', '\x4', '\x2', '\x2', '\x30', '\x31', '\a', '\x6', '\x2', '\x2', 
		'\x31', '\x35', '\x5', '\n', '\x6', '\x2', '\x32', '\x33', '\f', '\x3', 
		'\x2', '\x2', '\x33', '\x35', '\x5', '\x10', '\t', '\x2', '\x34', ',', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '/', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '?', '\x5', '\f', '\a', '\x2', 
		':', ';', '\x5', '\f', '\a', '\x2', ';', '<', '\a', '\a', '\x2', '\x2', 
		'<', '=', '\x5', '\n', '\x6', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x39', '\x3', '\x2', '\x2', '\x2', '>', ':', '\x3', '\x2', '\x2', 
		'\x2', '?', '\v', '\x3', '\x2', '\x2', '\x2', '@', '\x46', '\x5', '\xE', 
		'\b', '\x2', '\x41', '\x42', '\a', '\x3', '\x2', '\x2', '\x42', '\x46', 
		'\x5', '\f', '\a', '\x2', '\x43', '\x44', '\a', '\x4', '\x2', '\x2', '\x44', 
		'\x46', '\x5', '\f', '\a', '\x2', '\x45', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\r', '\x3', '\x2', '\x2', '\x2', 'G', 'K', '\x5', 
		'\x10', '\t', '\x2', 'H', 'K', '\x5', '\x12', '\n', '\x2', 'I', 'K', '\x5', 
		'\x14', '\v', '\x2', 'J', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\b', '\x2', '\x2', 'M', 'N', 
		'\x5', '\x4', '\x3', '\x2', 'N', 'O', '\a', '\t', '\x2', '\x2', 'O', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\xF', '\x2', '\x2', 'Q', 
		'Z', '\a', '\b', '\x2', '\x2', 'R', 'W', '\x5', '\x4', '\x3', '\x2', 'S', 
		'T', '\a', '\n', '\x2', '\x2', 'T', 'V', '\x5', '\x4', '\x3', '\x2', 'U', 
		'S', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'R', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', 
		']', '\x13', '\x3', '\x2', '\x2', '\x2', '^', '\x63', '\a', '\f', '\x2', 
		'\x2', '_', '\x63', '\a', '\r', '\x2', '\x2', '`', '\x63', '\a', '\xE', 
		'\x2', '\x2', '\x61', '\x63', '\a', '\xF', '\x2', '\x2', '\x62', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x15', '\x3', '\x2', '\x2', '\x2', '\f', '$', '&', '\x34', 
		'\x36', '>', '\x45', 'J', 'W', 'Z', '\x62',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
